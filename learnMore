        公司使用的接口框架中的HttpResponseJSONEncoder内置了Gson，但是内部定义的Gson是private的，有时无法满足需求，比如，默认情况下Gson会将字符串进行html escape，但是客户端的json解析不一定是使用的Gson，这样会导致客户端的响应中部分字符会使unicode码，需要手动解码，非常麻烦。
     考虑到能够自定义Gson，这里我没有直接使用HttpResponseJSONEncoder时，而是使用了Spring的FactoryBean，通过FactoryBean生成HttpResponseJSONEncoder，并在生成HttpResponseJSONEncoder的同时通过反射动态修改内置的私有的gson属性。话不多说，直接上代码：

1.这里定义了一个spring的FactoryBean

package oz.market.online.factroy;

import org.springframework.beans.factory.FactoryBean;

import oz.market.online.reflection.ReflectionUtils;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;

import edu.hziee.common.http.codec.HttpResponseJSONEncoder;
/**
 * 
 * @author dashengjun  2016年1月29日
 *
 */

public class HttpResponseJsonEncoderFactoryBean implements FactoryBean {
 private boolean isDebugEnabled;
 private byte[] encryptKey;
 /**
  * 通过spring的factorybean来生成HttpResponseJsonEncoder，这里主要使用反射来动态修改private属性gson的值
  */
 @Override
 public Object getObject() throws Exception {
  HttpResponseJSONEncoder encoder = new HttpResponseJSONEncoder();
  encoder.setEncryptKey(encryptKey);
  encoder.setDebugEnabled(isDebugEnabled);
  //重新定义gson
  //excludeFieldsWithoutExposeAnnotation用来使@Expose注解生效
  //disableHtmlEscaping用来告诉Gson不要做html escape，默认情况下Gson会将字符串中的 <、 >、=、&等字符做html escape。
  Gson gson = new GsonBuilder().excludeFieldsWithoutExposeAnnotation()
    .disableHtmlEscaping().create();

  String fieldName="gson";
  ReflectionUtils.getDeclaredField(encoder, fieldName);
  ReflectionUtils.setFieldValue(encoder, fieldName, gson);//替换掉原来的gson
  return encoder;
 }

 @Override
 public Class getObjectType() {
  // TODO Auto-generated method stub
  return HttpResponseJSONEncoder.class;
 }

 @Override
 public boolean isSingleton() {
  // TODO Auto-generated method stub
  return true;
 }


 public boolean isDebugEnabled() {
  return isDebugEnabled;
 }

 public byte[] getEncryptKey() {
  return encryptKey;
 }

 public void setDebugEnabled(boolean isDebugEnabled) {
  this.isDebugEnabled = isDebugEnabled;
 }

 public void setEncryptKey(byte[] encryptKey) {
  this.encryptKey = encryptKey;
 }
}

2.使用的反射工具类（此段代码参考网上）
package oz.market.online.reflection;

import java.lang.reflect.Field;
import java.lang.reflect.InvocationTargetException;
import java.lang.reflect.Method;

public class ReflectionUtils {  
   
    /** 
     * 循环向上转型, 获取对象的 DeclaredMethod 
     * @param object : 子类对象 
     * @param methodName : 父类中的方法名 
     * @param parameterTypes : 父类中的方法参数类型 
     * @return 父类中的方法对象 
     */  
      
    public static Method getDeclaredMethod(Object object, String methodName, Class<?> ... parameterTypes){  
        Method method = null ;  
          
        for(Class<?> clazz = object.getClass() ; clazz != Object.class ; clazz = clazz.getSuperclass()) {  
            try {  
                method = clazz.getDeclaredMethod(methodName, parameterTypes) ;  
                return method ;  
            } catch (Exception e) {  
                //这里甚么都不要做！并且这里的异常必须这样写，不能抛出去。  
                //如果这里的异常打印或者往外抛，则就不会执行clazz = clazz.getSuperclass(),最后就不会进入到父类中了  
              
            }  
        }  
          
        return null;  
    }  
      
    /** 
     * 直接调用对象方法, 而忽略修饰符(private, protected, default) 
     * @param object : 子类对象 
     * @param methodName : 父类中的方法名 
     * @param parameterTypes : 父类中的方法参数类型 
     * @param parameters : 父类中的方法参数 
     * @return 父类中方法的执行结果 
     */  
      
    public static Object invokeMethod(Object object, String methodName, Class<?> [] parameterTypes,  
            Object [] parameters) {  
        //根据 对象、方法名和对应的方法参数 通过反射 调用上面的方法获取 Method 对象  
        Method method = getDeclaredMethod(object, methodName, parameterTypes) ;  
          
        //抑制Java对方法进行检查,主要是针对私有方法而言  
        method.setAccessible(true) ;  
          
            try {  
                if(null != method) {  
                      
                    //调用object 的 method 所代表的方法，其方法的参数是 parameters  
                    return method.invoke(object, parameters) ;  
                }  
            } catch (IllegalArgumentException e) {  
                e.printStackTrace();  
            } catch (IllegalAccessException e) {  
                e.printStackTrace();  
            } catch (InvocationTargetException e) {  
                e.printStackTrace();  
            }  
          
        return null;  
    }  
  
    /** 
     * 循环向上转型, 获取对象的 DeclaredField 
     * @param object : 子类对象 
     * @param fieldName : 父类中的属性名 
     * @return 父类中的属性对象 
     */  
      
    public static Field getDeclaredField(Object object, String fieldName){  
        Field field = null ;  
          
        Class<?> clazz = object.getClass() ;  
          
        for(; clazz != Object.class ; clazz = clazz.getSuperclass()) {  
            try {  
                field = clazz.getDeclaredField(fieldName) ;  
                return field ;  
            } catch (Exception e) {  
                //这里甚么都不要做！并且这里的异常必须这样写，不能抛出去。  
                //如果这里的异常打印或者往外抛，则就不会执行clazz = clazz.getSuperclass(),最后就不会进入到父类中了  
                  
            }   
        }  
      
        return null;  
    }     
      
    /** 
     * 直接设置对象属性值, 忽略 private/protected 修饰符, 也不经过 setter 
     * @param object : 子类对象 
     * @param fieldName : 父类中的属性名 
     * @param value : 将要设置的值 
     */  
      
    public static void setFieldValue(Object object, String fieldName, Object value){  
      
        //根据 对象和属性名通过反射 调用上面的方法获取 Field对象  
        Field field = getDeclaredField(object, fieldName) ;  
          
        //抑制Java对其的检查  
        field.setAccessible(true) ;  
          
        try {  
            //将 object 中 field 所代表的值 设置为 value  
             field.set(object, value) ;  
        } catch (IllegalArgumentException e) {  
            e.printStackTrace();  
        } catch (IllegalAccessException e) {  
            e.printStackTrace();  
        }  
          
    }  
      
    /** 
     * 直接读取对象的属性值, 忽略 private/protected 修饰符, 也不经过 getter 
     * @param object : 子类对象 
     * @param fieldName : 父类中的属性名 
     * @return : 父类中的属性值 
     */  
      
    public static Object getFieldValue(Object object, String fieldName){  
          
        //根据 对象和属性名通过反射 调用上面的方法获取 Field对象  
        Field field = getDeclaredField(object, fieldName) ;  
          
        //抑制Java对其的检查  
        field.setAccessible(true) ;  
          
        try {  
            //获取 object 中 field 所代表的属性值  
            return field.get(object) ;  
              
        } catch(Exception e) {  
            e.printStackTrace() ;  
        }  
          
        return null;  
    }  
}  


3.最后，只要在配置文件中修改之前的配置即可

先看之前的配置：
<bean id="httpResponseEncoder" class="edu.hziee.common.http.codec.HttpResponseJSONEncoder"> 
          <property name="encryptKey" value="${encode.bytes.encrypt.key}" /> 
        <property 
 name="debugEnabled" value="${encode.bytes.debug.enabled}" />
 </bean>
修改后的配置：
<bean id="httpResponseEncoder"
   class="oz.market.online.factroy.HttpResponseJsonEncoderFactoryBean"> 
          <property name="encryptKey" value="${encode.bytes.encrypt.key}" />
          <property name="debugEnabled" value="${encode.bytes.debug.enabled}" />
 </bean>

